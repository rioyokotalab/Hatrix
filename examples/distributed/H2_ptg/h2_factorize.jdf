extern "C" %{

  #include "math.h"
  #include "parsec.h"
  #include "h2_ptg_internal.h"
  #include "tasks_c_interface.h"

  int64_t get_dim(const int64_t block, const int64_t level, h2_factorize_params_t* params) {
    return level == params->max_level ? params->nleaf : params->max_rank * 2;
  }
%}

/* data descriptors */
parsec_D [ type="parsec_data_collection_t*"]
parsec_U [ type="parsec_data_collection_t*" aligned=parsec_D]
h2_params [ type="h2_factorize_params_t*" ]

/* diagonal_multiply_complements task */

diagonal_multiply_complements(i, level)

level = h2_params->max_level .. h2_params->min_level
i = 0 .. %{ return pow(2, level)-1; %}


: parsec_D(i, i, level)

RW D <- parsec_D(i, i, level)
     -> D factorize_diagonal(i, level)
     -> parsec_D(i, i, level)
READ U <- parsec_U(i, level)

BODY
{
  int64_t D_nrows = get_dim(i, level, h2_params);
  int64_t D_ncols = get_dim(i, level, h2_params);
  int64_t D_row_rank = h2_params->max_rank;
  int64_t D_col_rank = h2_params->max_rank;
  int64_t U_nrows = get_dim(i, level, h2_params);
  int64_t U_ncols = h2_params->max_rank;
  char which  = 'F';

  printf("prod: %d level: %d\n", i, level);

  CORE_multiply_complement(D_nrows, D_ncols, D_row_rank, D_col_rank,
                           U_nrows, U_ncols, (double*)D, (double*)U, which);


}
END

/* factorize_diagonal task */
factorize_diagonal(i, level)

level = h2_params->max_level .. h2_params->min_level
i = 0 .. %{ return pow(2, level)-1; %}

: parsec_D(i, i, level)

RW D <- D diagonal_multiply_complements(i, level)
     -> parsec_D(i, i, level)

BODY
{
  int64_t D_nrows = get_dim(i, level, h2_params);
  int64_t rank_nrows = h2_params->max_rank;

  printf("factorize diagonal i-> %d level-> %d\n", i, level);

  CORE_factorize_diagonal(D_nrows, rank_nrows, D);
}
END

extern "C" %{

  #include "math.h"
  #include "parsec.h"
  #include "h2_ptg_internal.h"
  #include "tasks_c_interface.h"

  int64_t get_dim(const int64_t block, const int64_t level,
                  h2_factorize_params_t* params) {
    return level == params->max_level ? params->nleaf : params->max_rank * 2;
  }
%}

/* data descriptors */
parsec_D [ type="parsec_data_collection_t*"]
parsec_U [ type="parsec_data_collection_t*"]
parsec_US [ type="parsec_data_collection_t*"]
parsec_r [ type="parsec_data_collection_t*"]
parsec_S [ type="parsec_data_collection_t*" aligned=parsec_D]
parsec_F [ type="parsec_data_collection_t*"]
parsec_temp_fill_in_rows [ type="parsec_data_collection_t*" ]
h2_params [ type="h2_factorize_params_t*" ]

/* diagonal_multiply_complements task */
diagonal_multiply_complements(block, level)

level = h2_params->max_level .. h2_params->min_level
block = 0 .. %{ return pow(2, level)-1; %}

: parsec_D(block, block, level)

RW D <- parsec_D(block, block, level)
     -> D factorize_diagonal(block, level) [type=LEAF_SIZE_TILE]
READ U <- parsec_U(block, level)

BODY
{
  int64_t D_nrows = get_dim(block, level, h2_params);
  int64_t D_ncols = get_dim(block, level, h2_params);
  int64_t D_row_rank = h2_params->max_rank;
  int64_t D_col_rank = h2_params->max_rank;
  int64_t U_nrows = get_dim(block, level, h2_params);
  int64_t U_ncols = h2_params->max_rank;
  char which  = 'F';

  printf("exec compl: blk %d l: %d\n", block, level);

  CORE_multiply_complement(D_nrows, D_ncols, D_row_rank, D_col_rank,
                           U_nrows, U_ncols, (double*)D, (double*)U, which);
}
END

/* factorize_diagonal task */
factorize_diagonal(block, level)

level = h2_params->max_level .. h2_params->min_level
block = 0 .. %{ return pow(2, level)-1; %}
col_blocks = %{ return h2_params->col_near_list[level].level_block_list[block].length; %}

: parsec_D(block, block, level)

RW D <- D diagonal_multiply_complements(block, level) /* no type cuz always on the same MPI rank. */
     -> D merge_dense_blocks(0, block/2, 0, level-1) [type_local=BOTTOM_RIGHT type=BOTTOM_RIGHT]
     -> parsec_D(block, block, level) [type=LEAF_SIZE]

BODY
{
  int64_t D_nrows = get_dim(block, level, h2_params);
  int64_t rank_nrows = h2_params->max_rank;

  printf("exec diag block : %d l: %d col_block: %d\n", block/2, level, col_blocks);

  CORE_factorize_diagonal(D_nrows, rank_nrows, (double*)D);
}
END

merge_dense_blocks(submatrix, block, i, level) /* choose the i'th block on row 'block'. */

level = 1 .. 1
block = 0 .. %{ return pow(2, level)-1; %}
i = 0 .. %{ return h2_params->row_near_list[level].length-1; %}
submatrix = 0 .. 0

actual_i = %{ return h2_params->row_near_list[level].level_block_list[block].indices[i]; %}

: parsec_D(block, actual_i, level)

READ D <- D factorize_diagonal(block*2, level+1) [type=RANK_TILE]
WRITE BLOCK -> parsec_D(block, i, level) [type=SMALL_TILE]

BODY
{
  printf("merge dense blocks: block-> %d actual_i -> %d level -> %d submat -> %d\n",
         block, actual_i, level, submatrix);
}
END

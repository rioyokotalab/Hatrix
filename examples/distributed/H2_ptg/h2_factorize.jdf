extern "C" %{

  #include "math.h"
  #include "parsec.h"
  #include "h2_ptg_internal.h"
  #include "tasks_c_interface.h"

  int64_t get_dim(const int64_t block, const int64_t level, h2_factorize_params_t* params) {
    return level == params->max_level ? params->nleaf : params->max_rank * 2;
  }
%}

/* data descriptors */
parsec_D [ type="parsec_data_collection_t*"]
parsec_U [ type="parsec_data_collection_t*" aligned=parsec_D]
parsec_S [ type="parsec_data_collection_t*" aligned=parsec_D]
h2_params [ type="h2_factorize_params_t*" ]

/* diagonal_multiply_complements task */
diagonal_multiply_complements(i, level)

level = h2_params->max_level .. (h2_params->min_level)
i = 0 .. %{ return pow(2, level)-1; %}


: parsec_D(i, i, level)

RW D <- parsec_D(i, i, level)
     -> D factorize_diagonal(i, level)
     -> parsec_D(i, i, level)
READ U <- parsec_U(i, level)

BODY
{
  int64_t D_nrows = get_dim(i, level, h2_params);
  int64_t D_ncols = get_dim(i, level, h2_params);
  int64_t D_row_rank = h2_params->max_rank;
  int64_t D_col_rank = h2_params->max_rank;
  int64_t U_nrows = get_dim(i, level, h2_params);
  int64_t U_ncols = h2_params->max_rank;
  char which  = 'F';

  printf("exec compl: i %d l: %d\n", i, level);

  CORE_multiply_complement(D_nrows, D_ncols, D_row_rank, D_col_rank,
                           U_nrows, U_ncols, (double*)D, (double*)U, which);
}
END

/* left multiply complements */
/* left_multiply_complements(block, j, level) */

/* level = h2_params->max_level .. h2_params->max_level */
/* block = 0 .. %{ return h2_params->near_list[level].length-1; %} /\* row iteration *\/ */
/* j = 0 .. %{ return h2_params->near_list[level].level_block_list[block].length-1; %} */

/* : parsec_D(block, j, level) */

/* RW D <- block == 0 ? parsec_D(block, j, level) */
/*      -> parsec_D(block, j, level) */
/* READ U <- parsec_U(block, level) */

/* BODY */
/* { */

/*   printf("left multiply: %d %d %d\n", block, j, level); */
/* } */
/* END */

/* factorize_diagonal task */
factorize_diagonal(i, level)

level = h2_params->max_level .. h2_params->min_level
i = 0 .. %{ return pow(2, level)-1; %}

: parsec_D(i, i, level)

RW D <- D diagonal_multiply_complements(i, level)
     -> D merge_inadmissible_blocks(i, i, level, i/2, i/2, level-1)
     -> parsec_D(i, i, level)

BODY
{
  int64_t D_nrows = get_dim(i, level, h2_params);
  int64_t rank_nrows = h2_params->max_rank;

  printf("exec diag i : %d l: %d\n", i, level);

  CORE_factorize_diagonal(D_nrows, rank_nrows, (double*)D);
}
END

/* triangle_reduce_cc_co(i, block, level) */

/* level = h2_params->max_level .. h2_params->min_level */

/* merge step for inadmissible. */
merge_inadmissible_blocks(parent_i, parent_j, parent_level, child_i, child_j, child_level)

parent_level = h2_params->max_level .. h2_params->min_level
parent_i = 0 .. %{ return h2_params->near_list[parent_level].length-1; %}
parent_j = 0 .. %{ return h2_params->near_list[parent_level].level_block_list[parent_i].length-1; %}
child_level = h2_params->max_level-1 .. h2_params->min_level-1
child_i = 0 .. %{ return h2_params->near_list[child_level].length-1; %}
child_j = 0 .. %{ return h2_params->near_list[child_level].level_block_list[child_i].length-1; %}

  : parsec_D(child_i, child_j, child_level)

RW D <- D factorize_diagonal(parent_i, parent_level)
     -> parsec_D(child_i, child_i, child_level)

BODY
{
  printf("merge dense parent_l: %d parent_i: %d parent_j: %d child_l: %d child_i: %d child_j: %d\n",
         parent_level, parent_i, parent_j, child_level, child_i, child_j);
}
END

/* /\* merge step for admissible blocks. *\/ */
/* merge_admissible_blocks(parent_i, parent_j, parent_level, child_i, child_j, child_level) */

/* parent_level = h2_params->max_level .. h2_params->min_level */
/* parent_i = 0 .. %{ return h2_params->far_list[parent_level].length; %} */
/* parent_j = 0 .. %{ return h2_params->far_list[parent_level].level_block_list[parent_i].length; %} */
/* child_level = h2_params->max_level-1 .. h2_params->min_level-1 */
/* child_i = 0 .. %{ return h2_params->far_list[parent_level].length; %} */
/* child_j = 0 .. %{ return h2_params->far_list[parent_level].level_block_list[child_i].length; %} */

/*   : parsec_D(child_i, child_j, child_level) */

/* READ S <- parsec_S(parent_i, parent_j, parent_level) */
/* RW D <- parsec_D(child_i, child_j, child_level) */
/*      -> parsec_D(child_i, child_j, child_level) */

/* BODY */
/* { */
/*   printf("merge admissible blocks.\n"); */
/* } */
/* END */

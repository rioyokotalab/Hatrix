extern "C" %{

  #include "math.h"
  #include "parsec.h"
  #include "h2_ptg_internal.h"
  #include "tasks_c_interface.h"
%}

/* data descriptors */
parsec_D [ type="parsec_data_collection_t*"]
parsec_U [ type="parsec_data_collection_t*"]
h2_params [ type="h2_factorize_params_t*" ]

diagonal_multiply_complements(i, level)

level = h2_params->max_level .. h2_params->min_level
i = 0 .. %{ return pow(2, level)-1; %}

  : parsec_D(i, i, level)
/**
 * Here we define which process will execute the task, this is explained in
 * further details in following examples
 */

/**
 * A task has a finite number of input/output, and needs at least one input even
 * if this one is not used. We start here by a task that doesn't use
 * information, so we have only one 'flow' named A that receives NULL.
 */
  RW D <- (level == h2_params->max_level) ? parsec_D(i, i, level)
       -> parsec_D(i, i, level)
  READ U <- (level == h2_params->max_level) ? parsec_U(i, level)

/**
 * This is the body of the task that will be executed by one of the thread in the
 * engine.
 */
BODY
{
  double *_D = D;
  double *_U = U;
  printf("block %d level %d\n", i, level);
}
END

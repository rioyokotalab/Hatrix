function(host_specific_settings)
  cmake_host_system_information(RESULT HOST_NAME QUERY FQDN)
  # Fugaku settings
  if(${HOST_NAME} MATCHES "^fn01sv[0-9][0-9]$" OR ${HOST_NAME} MATCHES "^wisteria*")
    message("Fugaku/Wisteria supercomputer detected.")
    message("Using Fujitsu compilers (FCC).")
    set(CMAKE_C_COMPILER $ENV{FJSVXTCLANGA}/bin/fccpx PARENT_SCOPE)
    set(CMAKE_CXX_COMPILER $ENV{FJSVXTCLANGA}/bin/FCCpx PARENT_SCOPE)
    set(BLA_VENDOR Fujitsu_SSL2 PARENT_SCOPE)
    set(BLAS_INCLUDE_DIR $ENV{FJSVXTCLANGA}/include PARENT_SCOPE)
    return()
  elseif(APPLE)
    set(BLA_VENDOR Apple)
    find_path(LAPACKE_INCLUDE_DIR "lapacke.h" REQUIRED)
    find_library(LAPACKE_LIBRARY
      NAMES lapacke
      PATHS ${LAPACKE_LIBRARIES}
      REQUIRED)
    message("Found LAPACKE.")
    message(${LAPACKE_LIBRARY})
    set(LAPACKE_FOUND true PARENT_SCOPE)
    return()
  endif()
  # Default fallback. Note that all if-functions above call return()
  if (USE_MKL_SEQUENTIAL)
    # Use openMP and MKL sequential if need be.
    set(BLA_VENDOR Intel10_64lp_seq PARENT_SCOPE)
  else()
    set(BLA_VENDOR Intel10_64lp PARENT_SCOPE)
  endif()
  set(BLAS_INCLUDE_DIR $ENV{MKLROOT}/include PARENT_SCOPE)
  set(SCALAPACK_LIBS "-lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lmkl_blacs_intelmpi_lp64 -liomp5 -lpthread -lm -ldl" PARENT_SCOPE)
  add_definitions(-DUSE_MKL)
endfunction()
